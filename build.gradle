apply plugin : 'eclipse'
apply plugin : 'java'
apply plugin : 'jacoco'
apply plugin : 'maven-publish'

group = 'io.github.vantiv'
version = JAR_VERSION

repositories {
    maven  {
        url "http://repo1.maven.org/maven2"
    }
}

configurations {
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntimeOnly.extendsFrom runtimeOnly
    
    certificationTestImplementation.extendsFrom functionalTestImplementation
    certificationTestRuntimeOnly.extendsFrom functionalTestRuntimeOnly
    
    generateJAXB.extendsFrom mainRuntime
}

sourceSets {
    main{
        java{
            srcDirs += "$buildDir/generated"
        }
    }
    functionalTest {
        java {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
    }
    certificationTest {
        java {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
    }
}

dependencies{
    // https://mvnrepository.com/artifact/com.jcraft/jsch
    implementation group: 'com.jcraft', name: 'jsch', version: '0.1.55'
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.2.1'

    implementation group: 'org.bouncycastle', name: 'bcpg-jdk18on', version: '1.75'
    implementation group: 'org.bouncycastle', name: 'bcprov-ext-jdk15to18', version: '1.75'

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.11.0'


    generateJAXB group:'com.sun.xml.bind', name:'jaxb-core', version:'2.2.7'
    generateJAXB group:'com.sun.xml.bind', name:'jaxb-impl', version:'2.2.5-5'
    generateJAXB group:'com.sun.xml.bind', name:'jaxb-xjc', version:'2.2.5'
}

////////// PLUGIN CONFIGURATION ////////// 
sourceCompatibility=1.7

clean {
    // temporary, we need to change the tests to generate output inside build folder
    delete 'test'
}

jacocoTestReport {
    executionData(fileTree(dir:"${buildDir}/jacoco/", include:"*.exec"))
}

jar{
    manifest {
        attributes("Implementation-Title":"Cnp SDK For Java 1.5 and greater", "Implementation-Version":"${JAR_VERSION}","Implementation-Vendor":"Cnp&Co","Main-Class":"io.github.vantiv.sdk.Setup")
    }
    getDestinationDirectory().set(file("${DIST_DIR_15}/lib"))
    getArchiveFileName().set("cnp-sdk-for-java-${JAR_VERSION}.jar")
}

task javadocJar(type:Jar){
    getArchiveClassifier().set('javadoc')
    getDestinationDirectory().set(file("$buildDir/kit/java15/doc"))
}

test {
    reports.junitXml.destination(file("$buildDir/test-results/unit"))
    reports.html.destination(file("$buildDir/reports/tests/unit"))
}

////////// CUSTOM TASKS ///////////
task processXsd (type: Copy) {
    ext.xsdOutput = file("$buildDir/xsd") 
    
    from ('src/main/xsd') {
        include '*.xsd'
    }
    
    into xsdOutput
    
    doFirst {
        xsdOutput.mkdirs()
    }
    
    doLast {
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(attributeFormDefault=\"unqualified\")>", replace:"\\1 xmlns:jaxb=\"http://java.sun.com/xml/ns/jaxb\" jaxb:version=\"2.0\">", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpCommon_v${SCHEMA_VERSION}.xsd", match:"(elementFormDefault=\"qualified\")>", replace:"\\1 xmlns:jaxb=\"http://java.sun.com/xml/ns/jaxb\" jaxb:version=\"2.0\">", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"<xs:attribute name=\"id\" type=\"xp:string25Type\" use=\"required\"\\s*/>", replace:"       <xs:attribute name=\"id\" type=\"xp:string25Type\" use=\"required\" />", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"<xs:attribute name=\"id\" type=\"xp:stringMin1Max25CollapseWhiteSpaceType\" use=\"required\"\\s*/>", replace:"       <xs:attribute name=\"id\" type=\"xp:stringMin1Max25CollapseWhiteSpaceType\" use=\"required\" />", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"<xs:attribute name=\"customerId\" type=\"xp:customerIdType\" use=\"optional\"\\s*/>", replace:"       <xs:attribute name=\"customerId\" type=\"xp:customerIdType\" use=\"optional\"/>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpRecurring_v${SCHEMA_VERSION}.xsd", match:"<xs:sequence>", replace:"        <xs:sequence>")
        ant.replaceregexp(file:"$xsdOutput/cnpRecurring_v${SCHEMA_VERSION}.xsd", match:"<xs:element name=\"cnpTxnId\" type=\"xp:cnpIdType\" />", replace:"         <xs:element name=\"cnpTxnId\" type=\"xp:cnpIdType\" />")
        ant.replaceregexp(file:"$xsdOutput/cnpRecurring_v${SCHEMA_VERSION}.xsd", match:"<xs:element name=\"response\" type=\"xp:responseType\" />", replace:"         <xs:element name=\"response\" type=\"xp:responseType\" />")
        ant.replaceregexp(file:"$xsdOutput/cnpRecurring_v${SCHEMA_VERSION}.xsd", match:"<xs:element name=\"message\" type=\"xs:string\" />", replace:"         <xs:element name=\"message\" type=\"xs:string\" />")
        ant.replaceregexp(file:"$xsdOutput/cnpRecurring_v${SCHEMA_VERSION}.xsd", match:"<xs:element name=\"responseTime\" type=\"xs:dateTime\" />", replace:"         <xs:element name=\"responseTime\" type=\"xs:dateTime\" />")
        ant.replaceregexp(file:"$xsdOutput/cnpRecurring_v${SCHEMA_VERSION}.xsd", match:"</xs:sequence>", replace:"        </xs:sequence> ")
        ant.replaceregexp(file:"$xsdOutput/cnpRecurring_v${SCHEMA_VERSION}.xsd", match:"", replace:"")
        ant.replaceregexp(file:"$xsdOutput/cnpRecurring_v${SCHEMA_VERSION}.xsd", match:"", replace:"")
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"enumeration value=(.*?3dsAuthenticated.*?)/>", replace:"enumeration value=\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"AUTHENTICATED_3DS\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"enumeration value=(.*?3dsAttempted.*?)/>", replace:"enumeration value=\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"ATTEMPTED_3DS\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(element name=\"customerType\" minOccurs=\"0\".*?<xs:simpleType>)", replace:"\\1<xs:annotation><xs:appinfo><jaxb:typesafeEnumClass name=\"CustomerType\"/></xs:appinfo></xs:annotation>", flags:"s")
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(element name=\"residenceStatus\" minOccurs=\"0\".*?<xs:simpleType>)", replace:"\\1<xs:annotation><xs:appinfo><jaxb:typesafeEnumClass name=\"ResidenceStatus\"/></xs:appinfo></xs:annotation>", flags:"s")
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(element name=\"deliveryType\" minOccurs=\"0\".*?default=\"TBD\".*?<xs:simpleType>)", replace:"\\1<xs:annotation><xs:appinfo><jaxb:typesafeEnumClass name=\"DeliveryType\"/></xs:appinfo></xs:annotation>", flags:"s")
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"00\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"UNKNOWN\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"01\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"FEDERAL_NATIONAL_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"02\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"STATE_SALEX_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"03\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"CITY_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"04\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"LOCAL_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"05\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"MUNICIPAL_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"06\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"OTHER_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"10\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"VALUE_ADDED_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"11\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"GOODS_AND_SERVICES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"12\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"PROVINCIAL_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"13\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"HARMONIZED_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"14\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"QUEBEC_SALES_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"20\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"ROOM_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"21\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"OCCUPANCY_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"22\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"ENERGY_TAX\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpCommon_v${SCHEMA_VERSION}.xsd", match:"(<xs:enumeration value=\"\")\\s?+/>", replace:"\\1><xs:annotation><xs:appinfo><jaxb:typesafeEnumMember name=\"BLANK\"/></xs:appinfo></xs:annotation></xs:enumeration>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"(<xs:element name=\"echeckVerification.*?)<xs:all>(.*?)</xs:all>(.*?</xs:element)", replace:"\\1<xs:sequence>\\2</xs:sequence>\\3", flags:"s")
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"<xs:element ref=\"xp:echeckOrEcheckToken\"\\s?/>", replace:"<xs:choice><xs:element name=\"echeck\" type=\"xp:echeckType\"/><xs:element name=\"echeckToken\" type=\"xp:echeckTokenType\"/></xs:choice>", byline:true)
        ant.replaceregexp(file:"$xsdOutput/cnpTransaction_v${SCHEMA_VERSION}.xsd", match:"<xs:element ref=\"xp:echeckOrEcheckToken\" minOccurs=\"0\"\\s?/>", replace:"<xs:choice><xs:element name=\"echeck\" type=\"xp:echeckType\"/><xs:element name=\"echeckToken\" type=\"xp:echeckTokenType\"/></xs:choice>", byline:true)
        
    }
}

task generateJaxbClasses(dependsOn: processXsd) {
    compileJava.dependsOn it
    eclipseClasspath.dependsOn it
    
    ext.bindingsFile = "src/main/xsd/bindings.xml"
    ext.generatedDir = "${buildDir}/generated"
    
    inputs.dir processXsd.xsdOutput
    inputs.file bindingsFile
    outputs.dir generatedDir
    
    doFirst {
        mkdir generatedDir
    }
     
    doLast {
        ant.taskdef(name: "xjc", classname:"com.sun.tools.xjc.XJCTask", classpath:configurations.generateJAXB.asPath)
        ant.xjc(destdir:"${generatedDir}", package: "io.github.vantiv.sdk.generate", binding:bindingsFile, extension:'true'){
            schema(dir:"${processXsd.xsdOutput}", includes:"cnpOnline_v${SCHEMA_VERSION}.xsd,cnpBatch_v${SCHEMA_VERSION}.xsd")
        }
    }
}

task testFunctional(type:Test, dependsOn: functionalTestClasses){
    check.dependsOn it
    classpath = sourceSets.functionalTest.runtimeClasspath
    mustRunAfter test
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    reports.junitXml.destination(file("$buildDir/test-results/functional"))
    reports.html.destination(file("$buildDir/reports/tests/functional"))
}

task testCertification(type:Test, dependsOn: certificationTestClasses){
    check.dependsOn it
    classpath = sourceSets.certificationTest.runtimeClasspath
    mustRunAfter testFunctional
    testClassesDirs = sourceSets.certificationTest.output.classesDirs
    reports.junitXml.destination(file("$buildDir/test-results/certification"))
    reports.html.destination(file("$buildDir/reports/tests/certification"))
}

task copyJarToKit(type:Copy, dependsOn:[check,jar]){
    from "${DIST_DIR_15}/lib/cnp-sdk-for-java-${JAR_VERSION}.jar"
    from "LICENSE"
    into KIT_DIR
}

task copyLibsToKit(type:Copy, dependsOn:check){
    from configurations.runtimeClasspath.asFileTree.matching{
        include '**/activation*'
        include '**/jaxb-api*'
        include '**/jaxb-impl*'
        include '**/jsr173*'
        include '**/commons-logging-1.1.1*'
        include '**/commons-codec*'
        include '**/fluent-hc*'
        include '**/httpclient*'
        include '**/httpcore*'
        include '**/httpmime*'
        include '**/jsch*'
        include '**/commons-io*'
        include '**/bcpg-jdk15on*'
        include '**/bcprov-ext-jdk15on*'
    }

    into KIT_DEPENDENCIES_DIR
}

task tarKit(type:Tar, dependsOn:[copyJarToKit, copyLibsToKit]){
    compression = Compression.GZIP
    getDestinationDirectory().set(file("$buildDir/kit"))
    getArchiveFileName().set("cnp-sdk-for-java-${JAR_VERSION}.tar.gz")
    from "$buildDir/kit/java15"
}

task zipKit(type:Zip, dependsOn:[copyJarToKit, copyLibsToKit]){
    getDestinationDirectory().set(file("$buildDir/kit"))
    getArchiveFileName().set("cnp-sdk-for-java-${JAR_VERSION}.zip")
    from "$buildDir/kit/java15"
}

task kit(dependsOn:[tarKit, zipKit]){
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }
    build.dependsOn it
    dependsOn javadoc
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            pom {
                name = 'cnp-sdk-for-java'
                description = 'Vantiv eCommerce Java SDK is a Java implementation of the Vantiv eCommerce XML API'
                url = 'https://github.com/Vantiv/cnp-sdk-for-java'
                groupId = 'io.github.vantiv'
                artifactId = 'cnp-sdk-for-java'
                version = "${JAR_VERSION}"

                licenses {
                    license {
                        name = 'License'
                        url = 'https://github.com/Vantiv/cnp-sdk-for-java/blob/12.x/LICENSE'
                    }
                }
                developers{
                    developer{
                        id = 'vantivSDKSupport'
                        name = 'VantivSDKSupport'
                        email = 'sdksupport@fisglobal.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/vantiv/cnp-sdk-for-java.git'
                    developerConnection = 'scm:git:ssh://github.com/vantiv/cnp-sdk-for-java.git'
                    url = 'https://github.com/vantiv/cnp-sdk-for-java.git'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenPublication {
        build.dependsOn it
        destination = file("$buildDir/kit/cnp-sdk-for-java-${JAR_VERSION}.pom")
    }
}

task sourceJar(type:Jar) {
    build.dependsOn it
    dependsOn generateJaxbClasses
    getDestinationDirectory().set(file("${buildDir}/kit"))
    getArchiveClassifier().set('sources')
    from "src/main/java"
    from generateJaxbClasses.generatedDir
}